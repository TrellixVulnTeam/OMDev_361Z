<!--
  == Mark-XPR version 1.1
  == DTD for Mark-XPR commands
  == Author: A. Rauzy
  == Copyright (c) 2005 ARBoost Technologies
  ==
  == Table of contents
  == =================
  == 1) Root node
  == 2) Directive compute
  == 3) Directive let
  == 4) Directive repeat
  == 5) Directive transfer
  == 6) Directive print
  == 7) Directive aggregate
  -->

<!--
  == 1) Root node
  == ============
  == A Mark-XPR command file is made of one or more history,
  == i.e. computation.
  == An history is decribed by means of commands.
  == In the current version, available commands are the following.
  ==   compute:   to perform a computation on a graph.
  ==   let:       to set some environment variables.
  ==   repeat:    to iterate a sequence of commands.
  ==   transfer:  to apply a transition matrix.
  ==   print:     to print current results
  ==   aggregate: to aggregate results obtained on several graphs.
  == Several directives require parameters (that are not set by
  == default). However, since these parameters may be inherited
  == none of them is presented in the following as a required
  == attribute.
  -->

<!ELEMENT xprstudy ((history)*)>

<!ENTITY % command "
    compute
  | let
  | repeat
  | transfer
  | print
  | aggregate
  "> 

<!ENTITY % algorithm "
  (
    BCG
  | CGS
  | FEM
  | EXP
  | RK2
  | RK4
  | AB2
  | AB4
  | MST
  )
  "> 

<!ENTITY % all.attributes "
  graph      CDATA       #IMPLIED
  matrix     CDATA       #IMPLIED
  method     %algorithm; #IMPLIED
  dtratio    CDATA       #IMPLIED
  epsilon    CDATA       #IMPLIED
  duration   CDATA       #IMPLIED
  state      CDATA       #IMPLIED
  states     (yes | no)  #IMPLIED
  property   CDATA       #IMPLIED
  properties (yes | no)  #IMPLIED
  iterations CDATA       #IMPLIED
  number     CDATA       #IMPLIED
  trace      CDATA       #IMPLIED
  verbose    (yes | no)  #IMPLIED
  ">

<!ELEMENT history ((%command;)*)>

<!ATTLIST history %all.attributes;>


<!--
  == 2) Directive compute
  == ====================
  == The directive compute requires the following parameters.
  ==   graph:  a valid graph number.
  ==   method: one of the available method (see below).
  == Moreover, the following parameters can be set.
  ==   dtratio:  a floatting point number (default 1.0)
  ==   epsilon:  a floatting point number (default 1.0e-9)
  ==   duration: a floatting point number
  ==   verbose:  a Boolean.
  -->

<!ELEMENT compute EMPTY>

<!ATTLIST compute
  graph    CDATA       #IMPLIED
  method   %algorithm; 'FEM'
  dtratio  CDATA       '1.0'
  epsilon  CDATA       '1.0e-9'
  duration CDATA       #IMPLIED
  verbose  (yes | no)  #IMPLIED
  >


<!--
  == 3) Directive let
  == ================
  == The directive let may set any parameter
  -->

<!ELEMENT let ((%command;)*)>

<!ATTLIST let %all.attributes;>


<!--
  == 4) Directive repeat
  == ===================
  == The directive repear requires the following parameters.
  ==   iterations: an integer.
  -->

<!ELEMENT repeat ((%command;)*)>

<!ATTLIST repeat
  iterations CDATA '1'
  >


<!--
  == 5) Directive transfer
  == =====================
  == The directive transfer requires the following parameters.
  ==   matrix: a valid matrix number.
  -->

<!ELEMENT transfer EMPTY>

<!ATTLIST transfer
  matrix CDATA #IMPLIED
  >

 
<!--
  == 6) Directive print
  == ==================
  == The directive print requires the following parameters.
  ==   graph: a valid graph number.
  -->

<!ELEMENT print EMPTY>

<!ATTLIST print
  graph CDATA #IMPLIED
  >


<!--
  == 7) Directive aggregate
  == ======================
  == The directive print requires the following parameters.
  == Either,
  ==   state: a valid state number (in the current graph)
  == Or,
  ==   property: a valid property number (in the current graph)
  -->

<!ELEMENT print EMPTY>

<!ATTLIST print
  state    CDATA #IMPLIED
  property CDATA #IMPLIED
  >

